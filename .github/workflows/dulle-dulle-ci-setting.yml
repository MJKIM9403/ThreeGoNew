# Github Actions에 표시되는 Workflow 이름
name: Dulle-Dulle CI/CD

# master 브랜치로 push, pull request가 발생하면 workflow를 실행
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

# workflow에서 실행할 동작
jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    # JDK 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # 빌드 시간 향상을 위한 Gradle 캐싱
    - name: Gradle Caching
      uses: actions/cache@v4
      with:
        path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
            ${{ runner.os }}-gradle-

    # application.properties 파일 생성
    - name: Make application.properties
      run: mkdir ./src/main/resources |
           touch ./src/main/resources/application.properties

    - name: Deliver application.properties
      run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties

    # Gradle 설정 및 Build
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

    - name: Change gradlew permissions
      run: chmod +x ./gradlew

    - name: Build with Gradle Wrapper
      run: ./gradlew clean build

    # Docker 로그인
    - name: Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Docker 이미지 생성 및 Push
    - name: Docker build & Push
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/dulle-dulle-springboot .
        docker push ${{ secrets.DOCKER_USERNAME }}/dulle-dulle-springboot

  CD:
    needs: CI
    runs-on: ubuntu-latest

    steps:
      # EC2 접근 후 docker 이미지 pull & run
      - name: Deploy to EC2 Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: 22
          script: |
            sudo docker stop $(sudo docker ps -qa)
            sudo docker rm $(sudo docker ps -qa)
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/dulle-dulle-springboot
